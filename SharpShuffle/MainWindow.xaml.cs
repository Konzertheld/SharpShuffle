using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using System.Windows.Controls.Primitives;

namespace SharpShuffle
{
    delegate void FakeDelegate();

    /// <summary>
    /// Interaktionslogik für MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        ObservableCollection<Song> songs = new ObservableCollection<Song>();

        Player player;

        bool[] hiddenColumns;

        public MainWindow()
        {
            InitializeComponent();
            player = new Player();
            player.PositionChanged += new PlayerPositionChangedHandler(player_PositionChanged);
            player.PlaylistEnded += new PlaylistEndedHandler(player_PlaylistEnded);
            List<Song> fake = Startup.ActiveDB.LoadSongs("__VIEW");

            try
            {
                System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
                hiddenColumns = (bool[])bf.Deserialize(new System.IO.FileStream("c:\\cols.dat", System.IO.FileMode.Open));
            }
            catch (Exception) { }

            RefreshView();
            RefreshPools();

            dgrView.ItemsSource = songs;
            dgrView.AutoGeneratedColumns += new EventHandler(dgrView_AutoGeneratedColumns);

            lsvPlaylist.ItemsSource = player.Playlist;
            ((GridView)(lsvPlaylist.View)).Columns.Add(new GridViewColumn());
            ((GridView)(lsvPlaylist.View)).Columns.Add(new GridViewColumn());
            ((GridView)(lsvPlaylist.View)).Columns[0].DisplayMemberBinding = new Binding("Artists");
            ((GridView)(lsvPlaylist.View)).Columns[1].DisplayMemberBinding = new Binding("Title");
        }

        private void RefreshPools()
        {
            lsvFilterPool.ItemsSource = Startup.ActiveDB.PoolList(false);
        }

        void player_PlaylistEnded()
        {
            MessageBox.Show("Playlist ended");
        }

        private void RefreshView()
        {
            songs = new System.Collections.ObjectModel.ObservableCollection<Song>(Startup.ActiveDB.LoadSongs("__VIEW"));
            dgrView.ItemsSource = songs;
        }

        void player_PositionChanged(double position)
        {
            prgPosition.Dispatcher.Invoke(new FakeDelegate(delegate
            {
                prgPosition.Value = 100 - position * 100;
            }));
        }

        #region View column control
        void dgrView_AutoGeneratedColumns(object sender, EventArgs e)
        {
            if (hiddenColumns == null)
            {
                hiddenColumns = new bool[dgrView.Columns.Count];
                for (int i = 0; i < hiddenColumns.Count(); i++) hiddenColumns[i] = true;
            }

            for (int i = 0; i < dgrView.Columns.Count; i++)
            {
                MenuItem item = new MenuItem();
                item.Header = dgrView.Columns[i].Header;
                item.IsChecked = hiddenColumns[i];
                menSpalten.Items.Add(item);
                item.Click += new RoutedEventHandler(dgrViewColumn_Click);
                item.Checked += new RoutedEventHandler(dgrViewColumn_Checked);
                item.Unchecked += new RoutedEventHandler(dgrViewColumn_Unchecked);
                item.Tag = i;
                dgrView.Columns[i].Visibility = (hiddenColumns[i]) ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;
            }
        }

        void dgrViewColumn_Unchecked(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            dgrView.Columns[(int)item.Tag].Visibility = System.Windows.Visibility.Collapsed;
            hiddenColumns[(int)item.Tag] = false;
        }

        void dgrViewColumn_Checked(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            dgrView.Columns[(int)item.Tag].Visibility = System.Windows.Visibility.Visible;
            hiddenColumns[(int)item.Tag] = true;
        }

        void dgrViewColumn_Click(object sender, RoutedEventArgs e)
        {
            MenuItem item = sender as MenuItem;
            item.IsChecked = !item.IsChecked;
        }
        #endregion

        #region Filter
        private void lsvFilterPool_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Songpool view = new Songpool("__VIEW");
            view.Clear();
            foreach (string pool in lsvFilterPool.SelectedItems)
            {
                view.AddSongs(pool);
            }
            RefreshView();
        }
        #endregion

        #region View
        
        private void dgrView_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
                SelectSong();
        }
        private void SelectSong()
        {
            PlayActions action = Config.GetPlayAction(ModifierKeys.None);
            if ((Keyboard.Modifiers & ModifierKeys.Shift) == ModifierKeys.Shift)
                action = Config.GetPlayAction(ModifierKeys.Shift);
            else if ((Keyboard.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt)
                action = Config.GetPlayAction(ModifierKeys.Alt);
            else if ((Keyboard.Modifiers & ModifierKeys.Control) == ModifierKeys.Control)
                action = Config.GetPlayAction(ModifierKeys.Control);
            if (action == PlayActions.AddAndPlayNow)
            {
                player.Queue.Insert(0, dgrView.SelectedItem as Song);
                player.Playlist.Add(dgrView.SelectedItem as Song);
                player.NextSong(); // Is this always correct?
            }
            else if (action == PlayActions.AddAndPlayNext)
            {
                player.Queue.Insert(0, dgrView.SelectedItem as Song);
                player.Playlist.Add(dgrView.SelectedItem as Song);
            }
            else if (action == PlayActions.Add)
            {
                player.Playlist.Add(dgrView.SelectedItem as Song);
                player.PlayPlaylist();
            }
            else if (action == PlayActions.PlayNowUseView)
            {
            }
            else if (action == PlayActions.PlayNowReplacePlaylist)
            {
            }
            if (player.PlaybackState != TP_PLAYBACKSTATE.Playing) player.PlayPause();
        }
        #endregion

        private void Window_Closed(object sender, EventArgs e)
        {
            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
            bf.Serialize(new System.IO.FileStream("c:\\cols.dat", System.IO.FileMode.Create), hiddenColumns);
        }

        private void menShowHistory_Click(object sender, RoutedEventArgs e)
        {
            lsvFilterPool.SelectedItems.Clear();
            songs = new ObservableCollection<Song>(player.PlayedHistory);
            dgrView.ItemsSource = songs;
        }

        private void dgrView_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left && e.ClickCount == 1)
                SelectSong();
        }

        private void ScanFolder_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.FolderBrowserDialog fbd = new System.Windows.Forms.FolderBrowserDialog();
            fbd.SelectedPath = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic);
            fbd.ShowDialog();
            if (System.IO.Directory.Exists(fbd.SelectedPath))
            {
                Filemanagement.ProcessFolder(fbd.SelectedPath, true, "test");
            }
            RefreshPools();
        }

        private void CleanUpFiles_Click(object sender, RoutedEventArgs e)
        {
            Startup.ActiveDB.CleanAudiofiles();
        }       
    }
}
